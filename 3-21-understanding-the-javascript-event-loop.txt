对于很多人来说，js中的事件循环是一种神秘的东西。要了解事件循环首先我们必须知道js中有事件循环。
为什么js有事件循环
js是单线程语言，但是和其他单线程语言不同的是当你的代码在单线程中运行时，i/o操作在其他线程里面运行，并且会为你的代码制造一个事件来操作结果。所以当进行io操作时，你的代码可以做其他的事，这使得js变成一种非常有效率的语言。
事件循环
既然我们知道了为什么js会有事件循环，那么让我们更深一步来了解什么是事件循环吧。思考事件循环最好的方法之一就是假设你有一个小岛，岛上有个随从，会遵从你的任何指示。但是这个随从同一时刻只能做一件事，所以你在岛上做了一个终端，然后把一系列要你随从做的输入其中。当你的随从没事做的时候，他就会去终端，按下按钮，终端从列表中打印出一个任务。你的随从然后读了那个任务然后去完成它。
现在我们来给你的随从下列任务：
倒垃圾、购物、打扫房屋和割草。
你的随从做的第一件事就是去终端，按下按钮来打印第一个任务——倒垃圾。你的随从读了任务，然后去拿垃圾，并把它带去码头，垃圾会在码头被垃圾船回收。
当他做完这个他就无事可做了，所有他回到终端，按下按钮又得到另一个任务-购物。他读了新任务，回屋，列出一系列要买的东西。然后去码头把列表放到盒子里，盒子里的列表会被收起，要买的东西会被送到码头。这时，一旦列表被送到盒子里，你的随从就无事可做了。
所有他又回到终端，得到另一个任务。这次他需要打扫房间，简单的任务，他回去打扫房屋。当他做完他就回到终端打印另一个任务。当他正在打扫房间的时候，购买的物品送到了码头，一个新的任务-拿到购物物品并打开，加到任务清单上面。但是当他打印下一个任务的时候，这个任务是割草，岛上有一个自动割草机，所有他回去把割草机打开，他又没事做，回去打印任务了。
这个任务是拿购物物品，所有他来到码头拿到物品并打开。当他做这个任务的时候，割草机结束了，需要被拿走，这也创造了一个终端上新的任务-拿走割草机。你的随从又去到终端接受任务，把割草机带走。
在这个比喻之中，终端就是事件循环，随从是主线程，割草机和码头的购物者是异步io操作，所有你可以用一个http请求来代替购物者，用硬盘io歹意割草机。
由于任何阻塞的事都由另一个线程来自动完成，这让js模型在应对高吞吐事件时变成最有效率的模型之一。这意味着使你代码运行速度变慢的唯一一件事就是你的代码。js不适合计算密集型任务，因为它会阻塞事件循环，幸运的是这是web工作者要做的事。